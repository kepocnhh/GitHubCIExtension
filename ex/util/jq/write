#!/bin/bash

OUTPUT=/tmp/jqx.o

. ex/util/args/require $# 4 > $OUTPUT

VARIABLE="$1"
JQ_OPTION="$2"
JSON_FILE="$3"
JSON_QUERY="$4"

. ex/util/require VARIABLE JQ_OPTION JSON_FILE JSON_QUERY > $OUTPUT
. ex/util/assert -f $JSON_FILE > $OUTPUT

case "$JQ_OPTION" in
 -sfs) JSON_OPTION="select((.!=null)and(type==\"string\")and(.!=\"\"))";;
 -sb) JSON_OPTION="select((.!=null)and(type==\"boolean\"))"
  RESULT="$(jq -Mcer "${JSON_QUERY}|${JSON_OPTION}" $JSON_FILE 2> $OUTPUT)"; CODE=$?
  if test $CODE -eq 0; then
   if test "$RESULT" == "true"; then
    echo "$RESULT"; exit 0
   fi
   . ex/util/throw 121 "Unexpected boolean value \"$RESULT\"!" > $OUTPUT
  elif test $CODE -eq 1; then
   if test "$RESULT" == "false"; then
    echo "$RESULT"; exit 0
   fi
   . ex/util/throw 122 "Unexpected boolean value \"$RESULT\"!" > $OUTPUT
  fi
  echo "Json parse boolean error!"; exit 123;;
 -si) JSON_OPTION="select((.!=null)and(type==\"number\"))";;
 *) . ex/util/throw 13 "JQ | Option \"$JQ_OPTION\" is not supported!" > $OUTPUT;;
esac

RESULT="$(jq -Mcer "${JSON_QUERY}|${JSON_OPTION}" $JSON_FILE 2> $OUTPUT)"; CODE=$?
if test $CODE -ne 0; then
 . ex/util/throw 14 "Json parse $JSON_FILE by option \"$JQ_OPTION\" error!" > $OUTPUT
fi

printf -v "$VARIABLE" '%s' "$RESULT"
